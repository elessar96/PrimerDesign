}
Tm_probe=Tm_in+Tm_delta_probe
sible primer and probe sequences in the given ROI with Tm, GC content etc
n=(width(consensus)-length_max)*(length_max-length_min+1)
df<-data.frame(ID=numeric(length = n), pos=numeric(length = n), seq=character(length=n), Tm=numeric(length=n), GC=numeric(length=n), mismatches=numeric(length=n))
ind=0
Na=50
Mg=3
dNTPs=0.0003
for(i in 1:(width(consensus)-length_max-1)){
for(j in length_min:length_max){
ind<-ind+1
df$pos[[ind]]<-i
df$ID[[ind]]<-ind
sub<-subseq(consensus, start=i, width=j)
if(length(which(s2c(as.character(sub))%in% c("A", "G", "T", "C")))>1){
df$GC[[ind]]<-GC(as.character(sub))
df$seq[[ind]]<-as.character(sub)
temp<-s2c(as.character(sub))
mm<-which(!temp %in% c("A", "C", "G", "T"))
df$mismatches[[ind]]<-length(mm)
if(mismatch_tolerance==0 && length(which(is.na(c(Na,Mg,dNTPs))))==0){
# NN only works with non-ambiguous bases and with salt concentrations given
df$Tm[[ind]]<-Tm_NN(as.character(sub), Mg=Mg, Na=Na,dNTPs=dNTPs)
}else{
# otherwise use Wallace method
df$Tm[[ind]]<-Tm_Wallace(as.character(sub), ambiguous=TRUE)
}
}
}
}
mismatch_tolerance=0
for(i in 1:(width(consensus)-length_max-1)){
for(j in length_min:length_max){
ind<-ind+1
df$pos[[ind]]<-i
df$ID[[ind]]<-ind
sub<-subseq(consensus, start=i, width=j)
if(length(which(s2c(as.character(sub))%in% c("A", "G", "T", "C")))>1){
df$GC[[ind]]<-GC(as.character(sub))
df$seq[[ind]]<-as.character(sub)
temp<-s2c(as.character(sub))
mm<-which(!temp %in% c("A", "C", "G", "T"))
df$mismatches[[ind]]<-length(mm)
if(mismatch_tolerance==0 && length(which(is.na(c(Na,Mg,dNTPs))))==0){
# NN only works with non-ambiguous bases and with salt concentrations given
df$Tm[[ind]]<-Tm_NN(as.character(sub), Mg=Mg, Na=Na,dNTPs=dNTPs)
}else{
# otherwise use Wallace method
df$Tm[[ind]]<-Tm_Wallace(as.character(sub), ambiguous=TRUE)
}
}
}
}
grep("(.)\1{9,}", df$seq, invert=TRUE)
dim(df)
grep("(.)\1{4,}", df$seq)
grep("(.)\1{3,}", df$seq)
[grep("(.){4,}", df$seq]
grep("(.){4,}", df$seq)
grep("(.)\1{4,}", df$seq)
grep("(A)\1{4,}"
df$seq)
grep("(A)\1{4,}", df$seq)
grep("(A+)\1{4,}", df$seq)
grep("A{4,}", df$seq)
grep(".{4,}", df$seq)
grep("(A)\1{4,}", df$seq)
grep("A{4,}", df$seq)
grep("A{5,}", df$seq)
df[8,]
grep("C{5,}", df$seq)
grep("C{4,}", df$seq)
grep("G{4,}", df$seq)
grep("T{4,}", df$seq)
grep("T{5,}", df$seq)
grep("(A|C|G|T|N){5,}", df$seq)
grep("(A+)\1{4,}", df$seq)
grep("A{4,}", df$seq)
grep("A{5,}", df$seq)
passed<-unique(c(grep("A{5,}", df$seq, invert=TRUE), grep("A{5,}", df$seq, invert=TRUE), grep("C{5,}", df$seq, invert=TRUE), grep("G{5,}", df$seq, invert=TRUE),grep("T{5,}", df$seq, invert=TRUE), grep("N{5,}", df$seq, invert=TRUE)))
passed
failed<-unique(c(grep("A{5,}", df$seq), grep("C{5,}", df$seq), grep("G{5,}", df$seq),grep("T{5,}", df$seq), grep("N{5,}", df$seq)))
failed
grep("A{5,}", df$seq)
grep("C{5,}", df$seq)
grep("C{4,}", df$seq)
grep("C{3,}", df$seq)
grep("T{5,}", df$seq)
grep("T{4,}", df$seq)
grep("G{4,}", df$seq)
df_backup<-df
dim(df)
df<-df[-failed,]
dim(df)
df<-df_backup
df<-df[which(!df$ID %in% failed),]
# filter out those with more than 4 repetitions of same nucleotide
failed<-unique(c(grep("A{4,}", df$seq), grep("C{4,}", df$seq), grep("G{4,}", df$seq),grep("T{4,}", df$seq), grep("N{4,}", df$seq)))
failed
dim8df
dim(df)
df<-df[which(!df$ID %in% failed),]
df
dim(df)
grep("(A)\1{1,}", df$seq)
grep("(A)", df$seq)
grep("(A){2,}", df$seq)
grep("(A){3,}", df$seq)
grep("(A){4,}", df$seq)
df[1,]
grep("(.){4,}", df$seq)
grep("(.){5,}", df$seq)
grep("(.)\1{5,}", df$seq)
grep("(.)\1{1,}", df$seq)
grep("(\.)\1{1,}", df$seq)
grep("(\\.)\1{1,}", df$seq)
grep("(..){1,}", df$seq)
grep("(..){3,}", df$seq)
grep("(..){4,}", df$seq)
grep("(..)\1{2,}", df$seq)
grep("(..)(..)", df$seq)
grep("\(..\)\(..\)", df$seq)
grep("(A){1,}", df$seq)
grep("(A){2,}", df$seq)
grep("(A){3,}", df$seq)
grep("(A){4,}", df$seq)
df<-df_backup
grep("(A){4,}", df$seq)
grep("(A){5,}", df$seq)
grep("(.){5,}", df$seq)
grep("(.)\1{5,}", df$seq)
grep("(.)\1{2,}", df$seq)
grep("(.)\1", df$seq)
grep("(.) \1", df$seq)
grep("(.)\\1", df$seq)
grep("(.)\\1{2,}", df$seq)
grep("(.)\\1{3,}", df$seq)
grep("(.)\\1{4,}", df$seq)
df[8,]
grep("(..)\\1{3,}")
grep("(..)\\1{3,}", df$seq)
grep("(..)\\1{2,}", df$seq)
df[1771,]
df[1785,]
df[2962,]
p1="ACCCTGCAATCGGGT"
library(DECIPHER)
library(tidyr)
library(dplyr)
library(TmCalculator)
p2<-reverseComplement(p1) %>% as.character() %>% s2c()
p1<-as.character(p1) %>% s2c()
p1<-DNAString(p1)
p1<-DNAStringSet(p1)
p2
p1
p1
p1="ACCCTGCAATCGGGT"
p1<-DNAStringSet(p1)
p1
p2<-reverseComplement(p1) %>% as.character() %>% s2c()
p1<-as.character(p1) %>% s2c()
p2
p1
p1="ACCCTGCAATCTGGG"
p2<-reverseComplement(p1) %>% as.character() %>% s2c()
p1<-as.character(p1) %>% s2c()
p1="ACCCTGCAATCGGGT"
p1="ACCCTGCAATCTGGG"
p1="ACCCTGCAATCGGGT"
p1<-DNAStringSet(p1)
p1
reverse(p1)
score=0
i=1
sub1=p1[length(p1)-i:length(p1)]
sub2=p2[1:i]
sub1
sub2
sub1=p1[length(p1)-i-1:length(p1)-1]
sub1
reverse(p1)
p2<-reverseComplement(p1) %>% as.character() %>% s2c()
p1<-as.character(p1) %>% s2c()
score=0
i=1
sub1=p1[length(p1)-i-1:length(p1)-1]
sub2=p2[1:i]
p1
length(o1)
length(p1)
length(p1)-i-1
length(p1)-1
length(p1)-i:length(p1)
(length(p1)-i):length(p1)
sub1=p1[(length(p1)-i+1):length(p1)]
sub2=p2[1:i]
sub1
sub2
which(sub1==sub2)
i=3
sub1=p1[(length(p1)-i+1):length(p1)]
sub2=p2[1:i]
score=0
i=1
while(score<5 && i<length(p1)){
sub1=p1[(length(p1)-i+1):length(p1)]
sub2=p2[1:i]
print(length(which(sub1==sub2)))
score=length(which(sub1==sub2))
i=i+1
}
p1="ACCCTGCAATACGT"
p1<-DNAStringSet(p1)
p2<-reverseComplement(p1) %>% as.character() %>% s2c()
p1<-as.character(p1) %>% s2c()
p1
p2
score=0
i=1
while(score<5 && i<length(p1)){
sub1=p1[(length(p1)-i+1):length(p1)]
sub2=p2[1:i]
score=length(which(sub1==sub2))-length(which(!sub1==sub2))
i=i+1
}
score=0
i=1
while(score<5 && i<length(p1)){
sub1=p1[(length(p1)-i+1):length(p1)]
sub2=p2[1:i]
score=length(which(sub1==sub2))-length(which(!sub1==sub2))
i=i+1
print(score)
}
p1="ACCCTGCAATGACGTC"
p1<-DNAStringSet(p1)
p2<-reverseComplement(p1) %>% as.character() %>% s2c()
p1<-as.character(p1) %>% s2c()
score=0
i=1
while(score<5 && i<length(p1)){
sub1=p1[(length(p1)-i+1):length(p1)]
sub2=p2[1:i]
score=length(which(sub1==sub2))-length(which(!sub1==sub2))
i=i+1
print(score)
}
p1
p2
library(Biostrings)
library(BioStrings)
?std::cout
Rcpp::sourceCpp("U:/unprotected/Fabian/R packages/Rcpp_test.cpp")
Rcpp::sourceCpp("U:/unprotected/Fabian/R packages/Rcpp_test.cpp")
Rcpp::sourceCpp("U:/unprotected/Fabian/R packages/Rcpp_test.cpp")
load("U:/unprotected/Fabian/Sequences/HPV16_opt_primers.RData")
load("U:/unprotected/Fabian/Sequences/HPV16_variants_unaligned.RData")
load("U:/unprotected/Fabian/Sequences/20211110.RData")
primers
dim(primers$all_primers)
dim(primers$best_candidates)
seqs<-hpv16_vars
fwd<-primers$best_candidates %>% pull(fwd) %>% DNAStringSet()
probe<-primers$best_candidates %>% pull(probe) %>% DNAStringSet()
rev<-primers$best_candidates %>% pull(rev) %>% DNAStringSet() %>% reverseComplement()
library(dplyr)
library(DECIPHER)
all_oligos<-c(as.character(fwd), as.character(probe), as.character(rev)) %>% unique()
fwd<-primers$best_candidates %>% pull(fwd) %>% DNAStringSet()
probe<-primers$best_candidates %>% pull(probe) %>% DNAStringSet()
rev<-primers$best_candidates %>% pull(rev) %>% DNAStringSet() %>% reverseComplement()
primers$best_candidates
colnames(primers$best_candidates)
source("U:/sensitive/Nukleinsäuren/Fabian/GitHub/PrimerDesign/R/primer_design_functions_DEVELOPMENT.R")
primers<-design_primers(hpv16_vars, ROI=c(50,500), max_dist=30)
t1<-Sys.time()
primers<-design_primers(hpv16_vars, ROI=c(50,500), max_dist=30, n_sets=50)
t2<-Sys.time()
print(t2-t1)
source("U:/sensitive/Nukleinsäuren/Fabian/GitHub/PrimerDesign/R/primer_design_functions_DEVELOPMENT.R")
t1<-Sys.time()
primers<-design_primers(hpv16_vars, ROI=c(50,500), max_dist=30, n_sets=50)
t2<-Sys.time()
print(t2-t1)
source("U:/sensitive/Nukleinsäuren/Fabian/GitHub/PrimerDesign/R/primer_design_functions_DEVELOPMENT.R")
t1<-Sys.time()
primers<-design_primers(hpv16_vars, ROI=c(50,500), max_dist=30, n_sets=50)
t2<-Sys.time()
print(t2-t1)
primers
fwd<-primers$best_candidates %>% pull(fwd) %>% DNAStringSet()
probe<-primers$best_candidates %>% pull(probe) %>% DNAStringSet()
rev<-primers$best_candidates %>% pull(rev) %>% DNAStringSet() %>% reverseComplement()
all_oligos<-c(as.character(fwd), as.character(probe), as.character(rev)) %>% unique()
all_oligos
length(all_oligos)
length(fwd)
all_oligo_IDs<-c(primers$best_candidates$ID_fwd, primers$best_candidates$ID_probe, primers$best_candidates$ID_rev) %>% unique()
all_oligo_IDs
names_seq<-seqs %>% names()
t1<-Sys.time()
primers$best_candidates$fwd_pot_mismatch<-character(length(dim(primers$best_candidates)[[1]]))
primers$best_candidates$fwd_mismatch_score<-numeric(length(dim(primers$best_candidates)[[1]]))
primers$best_candidates$rev_pot_mismatch<-character(length(dim(primers$best_candidates)[[1]]))
primers$best_candidates$rev_mismatch_score<-numeric(length(dim(primers$best_candidates)[[1]]))
primers$best_candidates$probe_pot_mismatch<-character(length(dim(primers$best_candidates)[[1]]))
primers$best_candidates$probe_mismatch_score<-numeric(length(dim(primers$best_candidates)[[1]]))
for( i in 1:dim(primers$best_candidates)[[1]]){
al_fwd<-pairwiseAlignment(seqs, fwd[i], type="local")
al_probe<-pairwiseAlignment(seqs, probe[i], type="local")
al_rev<-pairwiseAlignment(seqs, rev[i], type="local")
sc_fwd<-al_fwd %>% score()
if(!min(sc_fwd) == max(sc_fwd)){
lim<-max(sc_fwd)
names_fwd<-names_seq[which(sc_fwd<lim)]
primers$best_candidates$fwd_pot_mismatch[[i]]<-paste(names_fwd, collapse="_AND_")
primers$best_candidates$fwd_mismatch_score[[i]]<-min(sc_fwd)
}
sc_probe<-al_probe %>% score()
if(!min(sc_probe) == max(sc_probe)){
lim<-max(sc_probe)
names_probe<-names_seq[which(sc_probe<lim)]
primers$best_candidates$probe_pot_mismatch[[i]]<-paste(names_probe, collapse="_AND_")
primers$best_candidates$probe_mismatch_score[[i]]<-min(sc_probe)
}
sc_rev<-al_rev %>% score()
if(!min(sc_rev) == max(sc_rev)){
lim<-max(sc_rev)
names_rev<-names_seq[which(sc_rev<lim)]
primers$best_candidates$rev_pot_mismatch[[i]]<-paste(names_rev, collapse="_AND_")
primers$best_candidates$rev_mismatch_score[[i]]<-min(sc_rev)
}
}
t2 <- Sys.time()
print(t2-t1)
all_oligo_IDs<-c(primers$best_candidates$ID_fwd, primers$best_candidates$ID_probe, primers$best_candidates$ID_rev) %>% unique() %>% as.character()
names_seq<-seqs %>% names()
t1<-Sys.time()
primers$best_candidates$fwd_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$fwd_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$rev_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$rev_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$probe_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$probe_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
oligo_details<-primers$all_seqs[all_oligo_IDs,]
oligo_details
oligo_details<-data.frame(primers$all_seqs[all_oligo_IDs,], mismatches=character(), score=numeric())
oligo_details<-data.frame(primers$all_seqs[all_oligo_IDs,], mismatches=character(length=length(all_oligo_IDs)), score=numeric(length=length(all_oligo_IDs)))
t1<-Sys.time()
primers$best_candidates$fwd_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$fwd_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$rev_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$rev_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$probe_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$probe_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
oligo_details<-data.frame(primers$all_seqs[all_oligo_IDs,], mismatches=character(length=length(all_oligo_IDs)), score=numeric(length=length(all_oligo_IDs)))
for( i in 1:dim(oligo_details)[[1]]){
al<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local")
sc<-al %>% score()
if(!min(sc) == max(sc)){
lim<-max(sc)
names<-names_seq[which(sc<lim)]
oligo_details$mismatches[[i]]<-paste(names_fwd, collapse="_AND_")
oligo_details$score[[i]]<-min(sc_fwd)
}
}
t2 <- Sys.time()
print(t2-t1)
oligo_details
i=1
oligo_details[as.character(primers$best_candidates$ID_fwd[[i]]),]$mismatches
primers$best_candidates[1,]
oligo_details[which(oligo_details==primers$best_candidates$ID_fwd[[i]],]$mismatches
oligo_details[which(oligo_details==primers$best_candidates$ID_fwd[[i]]),]$mismatches
oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$mismatches
which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]])
primers$best_candidates$ID_fwd[[i]]
oligo_details$ID
i=1
oligo_details<-data.frame(primers$all_seqs[as.character(all_oligo_IDs),], mismatches=character(length=length(all_oligo_IDs)), score=numeric(length=length(all_oligo_IDs)))
oligo_details$seq[i]
primers$best_candidates[1,]
al<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local")
al<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local", scoreOnly=TRUE)
a
al
sc<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local", scoreOnly=TRUE)
min(sc) == max(sc)
lim<-max(sc)
lim
names<-names_seq[which(sc<lim)]
length(names)
oligo_details<-data.frame(primers$all_seqs[as.character(all_oligo_IDs),], mismatches=character(length=length(all_oligo_IDs)), score=numeric(length=length(all_oligo_IDs)))
for( i in 1:dim(oligo_details)[[1]]){
sc<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local", scoreOnly=TRUE)
if(!min(sc) == max(sc)){
lim<-max(sc)
names<-names_seq[which(sc<lim)]
oligo_details$mismatches[[i]]<-paste(names, collapse="_AND_")
oligo_details$score[[i]]<-min(sc_fwd)
}
}
i=1
oligo_details[which(oligo_details==primers$best_candidates$ID_fwd[[i]],]$mismatches
oligo_details[which(oligo_details==primers$best_candidates$ID_fwd[[i]]),]$mismatches
t1<-Sys.time()
primers$best_candidates$fwd_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$fwd_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$rev_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$rev_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$probe_pot_mismatch<-character(length=dim(primers$best_candidates)[[1]])
primers$best_candidates$probe_mismatch_score<-numeric(length=dim(primers$best_candidates)[[1]])
oligo_details<-data.frame(primers$all_seqs[as.character(all_oligo_IDs),], mismatches=character(length=length(all_oligo_IDs)), score=numeric(length=length(all_oligo_IDs)))
for( i in 1:dim(oligo_details)[[1]]){
sc<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local", scoreOnly=TRUE)
if(!min(sc) == max(sc)){
lim<-max(sc)
names<-names_seq[which(sc<lim)]
oligo_details$mismatches[[i]]<-paste(names, collapse="_AND_")
oligo_details$score[[i]]<-min(sc_fwd)
}
}
for(i in 1:dim(primers$best_candidates)){
primers$best_candidates$fwd_pot_mismatch[[i]]<-oligo_details[which(oligo_details==primers$best_candidates$ID_fwd[[i]],]$mismatches
primers$best_candidates$_pot_mismatch[[i]]<-oligo_details[which(oligo_details==primers$best_candidates$ID_fwd[[i]],]$score
}
t2 <- Sys.time()
print(t2-t1)
for(i in 1:dim(primers$best_candidates)){
primers$best_candidates$fwd_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]],]$mismatches
primers$best_candidates$rev_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]],]$score
primers$best_candidates$probe_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]],]$score
}
for(i in 1:dim(primers$best_candidates)){
primers$best_candidates$fwd_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$mismatches
primers$best_candidates$rev_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]]),]$mismatches
primers$best_candidates$probe_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]]),]$mismatches
primers$best_candidates$fwd_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$score
primers$best_candidates$rev_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]]),]$score
primers$best_candidates$probe_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]]),]$score
}
primers$best_candidates
table(primers$best_candidates$fwd_mismatch_score)
table(primers$best_candidates$ID_fwd)
oligo_details
oligo_details<-data.frame(primers$all_seqs[as.character(all_oligo_IDs),], mismatches=character(length=length(all_oligo_IDs)), score=numeric(length=length(all_oligo_IDs)))
for( i in 1:dim(oligo_details)[[1]]){
sc<-pairwiseAlignment(seqs, oligo_details$seq[i], type="local", scoreOnly=TRUE)
if(!min(sc) == max(sc)){
lim<-max(sc)
names<-names_seq[which(sc<lim)]
oligo_details$mismatches[[i]]<-paste(names, collapse="_AND_")
oligo_details$score[[i]]<-min(sc)
}
}
for(i in 1:dim(primers$best_candidates[[1]])){
primers$best_candidates$fwd_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$mismatches
primers$best_candidates$rev_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]]),]$mismatches
primers$best_candidates$probe_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]]),]$mismatches
primers$best_candidates$fwd_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$score
primers$best_candidates$rev_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]]),]$score
primers$best_candidates$probe_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]]),]$score
}
for(i in 1:dim(primers$best_candidates)[[1]]){
primers$best_candidates$fwd_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$mismatches
primers$best_candidates$rev_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]]),]$mismatches
primers$best_candidates$probe_pot_mismatch[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]]),]$mismatches
primers$best_candidates$fwd_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_fwd[[i]]),]$score
primers$best_candidates$rev_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_rev[[i]]),]$score
primers$best_candidates$probe_mismatch_score[[i]]<-oligo_details[which(oligo_details$ID==primers$best_candidates$ID_probe[[i]]),]$score
}
primers$best_candidates[1,]
table(primers$best_candidates$fwd_mismatch_score)
oligo_details
seq_names_fwd <-primers$best_candidates$fwd_pot_mismatch %>% strsplit(., split="_AND_") #%>% unlist() %>% unique()
seq_names_rev <-primers$best_candidates$rev_pot_mismatch %>% strsplit(., split="_AND_") #%>% unlist() %>% unique()
seq_names_probe <-primers$best_candidates$probe_pot_mismatch %>% strsplit(., split="_AND_") #%>% unlist() %>% unique()
seq_names_fwd
seq_names_fwd[1]
seq_names_rev[1]
seq_names_probe[1]
nseq <- c()
for(i in 1:length(seq_names_fwd)){
nseq[i] <- c(seq_names_fwd[[i]], seq_names_rev[[i]], seq_names_probe[[i]]) %>% unlist() %>% unique() %>% length()
}
primers$best_candidates$n_mismatched_seqs<-nseq
primers$best_candidates$score<-primers$best_candidates$score-(((primers$best_candidates$n_mismatched_seqs/length(seqs))^2)*10000)
primers$best_candidates<-primers$best_candidates[order(primers$best_candidates$n_mismatched_seqs),]
primers$best_candidates
source("U:/sensitive/Nukleinsäuren/Fabian/GitHub/PrimerDesign/R/primer_design_functions_DEVELOPMENT.R")
t1<-Sys.time()
primers<-design_primers(hpv16_vars, ROI=c(50,500), max_dist=30, n_sets=50)
t2<-Sys.time()
print(t2-t1)
getwd()
setwd("U:/sensitive/Nukleinsäuren/Fabian/GitHub/PrimerDesign")
document()
library(devtools)
document()
library(roxygen2)
document()
setwd("..")
getwd()
setwd("U:/unprotected/Fabian")
getwd()
dir()
setwd(dir()[1])
setwd(dir()[1])
document()
?design_primers
